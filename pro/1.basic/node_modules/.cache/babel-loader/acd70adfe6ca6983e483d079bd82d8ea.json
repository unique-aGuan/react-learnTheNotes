{"ast":null,"code":"/*\n * @Descripttion: \n * @version: v1.0\n * @Author: aguan\n * @Date: 2021-11-08 19:22:47\n * @LastEditors: aguan\n * @LastEditTime: 2021-11-08 20:45:08\n */\nimport { REACT_TEXT } from \"./contants\";\n/**\n * @name: render\n * @param {object} vdom 虚拟DOM 也就是React元素\n * @param {Element} container 真实DOM容器\n * @return {*}\n */\n\nfunction render(vdom, container) {\n  mount(vdom, container);\n}\n\nfunction mount(vdom, container) {\n  // 把虚拟dom变成真实dom\n  let newDOM = createDOM(vdom); // 把真实dom追加到容器上\n\n  container.appendChild(newDOM);\n}\n/**\n * @name: createDOM\n * @msg 把虚拟DOM编程真实DOM\n * @param {*} vdom 虚拟DOM\n * @return {*} 真实DOM\n */\n\n\nfunction createDOM(vdom) {\n  let {\n    type,\n    props\n  } = vdom;\n  let dom; // 真实DOM\n\n  if (type === REACT_TEXT) {\n    // 创建文本节点\n    dom = document.createTextNode(props.content);\n  } else {\n    // 创建DOM节点\n    dom = document.createElement(type);\n  }\n\n  if (props) {\n    // 更新DOM的属性 注： 暂时没有第二个实参 后面实现组件的更新的时候就会有了，暂时写死\n    updateProps(dom, {}, props);\n    let children = props.children; // 如果说children是一个React元素，也就是说也是个虚拟DOM\n\n    if (typeof children === 'object' && children.type) {\n      // 把这个儿子这个虚拟DOM挂在到父节点DOM上\n      mount(children, dom);\n    } else if (Array.isArray(children)) {\n      reconcileChildren(children, dom);\n    }\n  }\n\n  vdom.dom = dom; // 在虚拟DOM上挂载或者说放置一个dom属性指向此虚拟DOM对应的真实DOM\n\n  return dom;\n}\n\nfunction reconcileChildren(children, parentDom) {\n  children.forEach(childVdom => mount(childVdom, parentDom));\n}\n/**\n * @name: updateProps\n * @msg: 更新真实DOM上面的属性\n * @param {*} dom 真实DOM\n * @param {*} oldProps 老的属性\n * @param {*} newProps 新的属性\n * @return {*} undefined\n * @example: \n */\n\n\nfunction updateProps(dom, oldProps, newProps) {\n  for (let key in newProps) {\n    if (key === 'children') {\n      continue; // 此处不处理子节点\n    } else if (key === 'style') {\n      let styleObj = newProps[key];\n\n      for (let attr in styleObj) {\n        dom.style[attr] = styleObj[attr];\n      }\n    } else {\n      dom[key] = newProps[key];\n    }\n  }\n\n  for (let key in oldProps) {\n    // 如果说一个属性劳动属性对象里边有，新的属性对象里边没有，就需要删除\n    if (!newProps.hasOwnProperty(key)) {\n      dom[key] = null;\n    }\n  }\n}\n\nconst ReactDOM = {\n  render\n};\nexport default ReactDOM;","map":{"version":3,"sources":["/Users/aguan/Documents/learning/code/1.basic/src/react-dom.js"],"names":["REACT_TEXT","render","vdom","container","mount","newDOM","createDOM","appendChild","type","props","dom","document","createTextNode","content","createElement","updateProps","children","Array","isArray","reconcileChildren","parentDom","forEach","childVdom","oldProps","newProps","key","styleObj","attr","style","hasOwnProperty","ReactDOM"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,YAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,SAAtB,EAAiC;AAC7BC,EAAAA,KAAK,CAACF,IAAD,EAAOC,SAAP,CAAL;AACH;;AAED,SAASC,KAAT,CAAeF,IAAf,EAAqBC,SAArB,EAAgC;AAC5B;AACA,MAAIE,MAAM,GAAGC,SAAS,CAACJ,IAAD,CAAtB,CAF4B,CAG5B;;AACAC,EAAAA,SAAS,CAACI,WAAV,CAAsBF,MAAtB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBJ,IAAnB,EAAyB;AACrB,MAAI;AAAEM,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBP,IAAtB;AACA,MAAIQ,GAAJ,CAFqB,CAEZ;;AACT,MAAIF,IAAI,KAAKR,UAAb,EAAyB;AAAE;AACvBU,IAAAA,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,KAAK,CAACI,OAA9B,CAAN;AACH,GAFD,MAEO;AAAE;AACLH,IAAAA,GAAG,GAAGC,QAAQ,CAACG,aAAT,CAAuBN,IAAvB,CAAN;AACH;;AAED,MAAIC,KAAJ,EAAW;AACP;AACAM,IAAAA,WAAW,CAACL,GAAD,EAAM,EAAN,EAAUD,KAAV,CAAX;AACA,QAAIO,QAAQ,GAAGP,KAAK,CAACO,QAArB,CAHO,CAIP;;AACA,QAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACR,IAA7C,EAAmD;AAC/C;AACAJ,MAAAA,KAAK,CAACY,QAAD,EAAWN,GAAX,CAAL;AACH,KAHD,MAGO,IAAIO,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAChCG,MAAAA,iBAAiB,CAACH,QAAD,EAAWN,GAAX,CAAjB;AACH;AACJ;;AAEDR,EAAAA,IAAI,CAACQ,GAAL,GAAWA,GAAX,CAtBqB,CAsBL;;AAChB,SAAOA,GAAP;AACH;;AAID,SAASS,iBAAT,CAA2BH,QAA3B,EAAqCI,SAArC,EAAgD;AAC5CJ,EAAAA,QAAQ,CAACK,OAAT,CAAiBC,SAAS,IAAIlB,KAAK,CAACkB,SAAD,EAAWF,SAAX,CAAnC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASL,WAAT,CAAqBL,GAArB,EAA0Ba,QAA1B,EAAoCC,QAApC,EAA8C;AAC1C,OAAK,IAAIC,GAAT,IAAgBD,QAAhB,EAA0B;AACtB,QAAIC,GAAG,KAAK,UAAZ,EAAwB;AACpB,eADoB,CACV;AACb,KAFD,MAEO,IAAIA,GAAG,KAAK,OAAZ,EAAqB;AACxB,UAAIC,QAAQ,GAAGF,QAAQ,CAACC,GAAD,CAAvB;;AACA,WAAK,IAAIE,IAAT,IAAiBD,QAAjB,EAA2B;AACvBhB,QAAAA,GAAG,CAACkB,KAAJ,CAAUD,IAAV,IAAkBD,QAAQ,CAACC,IAAD,CAA1B;AACH;AACJ,KALM,MAKA;AACHjB,MAAAA,GAAG,CAACe,GAAD,CAAH,GAAWD,QAAQ,CAACC,GAAD,CAAnB;AACH;AACJ;;AACD,OAAI,IAAIA,GAAR,IAAeF,QAAf,EAAyB;AACrB;AACA,QAAI,CAACC,QAAQ,CAACK,cAAT,CAAwBJ,GAAxB,CAAL,EAAmC;AAC/Bf,MAAAA,GAAG,CAACe,GAAD,CAAH,GAAW,IAAX;AACH;AACJ;AACJ;;AAED,MAAMK,QAAQ,GAAG;AACb7B,EAAAA;AADa,CAAjB;AAIA,eAAe6B,QAAf","sourcesContent":["/*\n * @Descripttion: \n * @version: v1.0\n * @Author: aguan\n * @Date: 2021-11-08 19:22:47\n * @LastEditors: aguan\n * @LastEditTime: 2021-11-08 20:45:08\n */\nimport { REACT_TEXT } from \"./contants\";\n\n/**\n * @name: render\n * @param {object} vdom 虚拟DOM 也就是React元素\n * @param {Element} container 真实DOM容器\n * @return {*}\n */\nfunction render(vdom, container) {\n    mount(vdom, container)\n}\n\nfunction mount(vdom, container) {\n    // 把虚拟dom变成真实dom\n    let newDOM = createDOM(vdom)\n    // 把真实dom追加到容器上\n    container.appendChild(newDOM)\n}\n\n/**\n * @name: createDOM\n * @msg 把虚拟DOM编程真实DOM\n * @param {*} vdom 虚拟DOM\n * @return {*} 真实DOM\n */\nfunction createDOM(vdom) {\n    let { type, props } = vdom;\n    let dom; // 真实DOM\n    if (type === REACT_TEXT) { // 创建文本节点\n        dom = document.createTextNode(props.content)\n    } else { // 创建DOM节点\n        dom = document.createElement(type)\n    }\n\n    if (props) {\n        // 更新DOM的属性 注： 暂时没有第二个实参 后面实现组件的更新的时候就会有了，暂时写死\n        updateProps(dom, {}, props)\n        let children = props.children;\n        // 如果说children是一个React元素，也就是说也是个虚拟DOM\n        if (typeof children === 'object' && children.type) {\n            // 把这个儿子这个虚拟DOM挂在到父节点DOM上\n            mount(children, dom)\n        } else if (Array.isArray(children)) {\n            reconcileChildren(children, dom)\n        }\n    }\n\n    vdom.dom = dom; // 在虚拟DOM上挂载或者说放置一个dom属性指向此虚拟DOM对应的真实DOM\n    return dom;\n}\n\n\n\nfunction reconcileChildren(children, parentDom) {\n    children.forEach(childVdom => mount(childVdom,parentDom))\n}\n\n/**\n * @name: updateProps\n * @msg: 更新真实DOM上面的属性\n * @param {*} dom 真实DOM\n * @param {*} oldProps 老的属性\n * @param {*} newProps 新的属性\n * @return {*} undefined\n * @example: \n */\nfunction updateProps(dom, oldProps, newProps) {\n    for (let key in newProps) {\n        if (key === 'children') {\n            continue; // 此处不处理子节点\n        } else if (key === 'style') {\n            let styleObj = newProps[key];\n            for (let attr in styleObj) {\n                dom.style[attr] = styleObj[attr]\n            }\n        } else {\n            dom[key] = newProps[key]\n        }\n    }\n    for(let key in oldProps) {\n        // 如果说一个属性劳动属性对象里边有，新的属性对象里边没有，就需要删除\n        if (!newProps.hasOwnProperty(key)) {\n            dom[key] = null;\n        }\n    }\n}\n\nconst ReactDOM = {\n    render\n}\n\nexport default ReactDOM;"]},"metadata":{},"sourceType":"module"}