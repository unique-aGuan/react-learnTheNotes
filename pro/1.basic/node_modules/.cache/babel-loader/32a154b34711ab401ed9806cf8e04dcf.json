{"ast":null,"code":"/*\n * @Descripttion: \n * @version: v1.0\n * @Author: aguan\n * @Date: 2021-11-08 17:09:50\n * @LastEditors: aguan\n * @LastEditTime: 2021-11-08 20:09:55\n */\nimport { REACT_ELEMENT } from './contants';\nimport { wrapToVdom } from './utils';\n/**\n * reactElement是jsx经过babel编译过后的一种正规的js写法（jsx是reactElement的语法糖）\n * \n * @category Function\n * @param {*} type 就是我们要渲染的元素类型，可以是一个元素Tag名称（小写字符串），也可以是一个组件的名称（大写的...组建）。\n * @param {object} config 就是我们在jsx中给元素/组建绑定的属性，这些属性会在config对象种以健值对的形式存在。\n * @param {...object} children 第3～n个参数 是元素/组件的内容/子元素，以children的形式存在。\n * @returns {object} 一个js对象树，他能完整的描述dom结构，称之为虚拟DOM\n * @example null\n */\n\nfunction createElement(type, config, children) {\n  let ref, key;\n\n  if (config) {\n    ref = config.ref; // 后面会说 是用来引用这个真实DOM元素的\n\n    key = config.key; // 后面会说 是用来进行DOM-diff优化的，用来唯一表示某个子元素的\n\n    delete config.ref;\n    delete config.key;\n  }\n\n  let props = { ...config\n  };\n\n  if (arguments.length > 3) {\n    // 如果参数的长度大于三，说明有多个儿子\n    props.children = Array.prototype.slice.call(arguments, 2).map(wrapToVdom);\n  } else if (arguments.length === 3) {\n    props.children = wrapToVdom(children); // 可以是字符串 数字 React元素\n  }\n\n  return {\n    // 虚拟dom\n    $$typeof: REACT_ELEMENT,\n    // 元素的类型\n    type,\n    // dom标签的类型 h1 h2 span div\n    ref,\n    key,\n    props // className style children\n\n  };\n}\n\nconst React = {\n  createElement\n};\nexport default React;","map":{"version":3,"sources":["/Users/aguan/Documents/learning/code/react-learnTheNotes/1.basic/src/react.js"],"names":["REACT_ELEMENT","wrapToVdom","createElement","type","config","children","ref","key","props","arguments","length","Array","prototype","slice","call","map","$$typeof","React"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,YAA9B;AACA,SAAUC,UAAV,QAA4B,SAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+C;AAC3C,MAAIC,GAAJ,EAAQC,GAAR;;AACA,MAAIH,MAAJ,EAAY;AACRE,IAAAA,GAAG,GAAGF,MAAM,CAACE,GAAb,CADQ,CACU;;AAClBC,IAAAA,GAAG,GAAGH,MAAM,CAACG,GAAb,CAFQ,CAEU;;AAClB,WAAOH,MAAM,CAACE,GAAd;AACA,WAAOF,MAAM,CAACG,GAAd;AACH;;AACD,MAAIC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAZ;;AACA,MAAIK,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AAAE;AACxBF,IAAAA,KAAK,CAACH,QAAN,GAAiBM,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,EAAsC,CAAtC,EAAyCM,GAAzC,CAA6Cd,UAA7C,CAAjB;AACH,GAFD,MAEO,IAAIQ,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/BF,IAAAA,KAAK,CAACH,QAAN,GAAiBJ,UAAU,CAACI,QAAD,CAA3B,CAD+B,CACQ;AAC1C;;AACD,SAAO;AAAE;AACLW,IAAAA,QAAQ,EAAEhB,aADP;AACsB;AACzBG,IAAAA,IAFG;AAEE;AACLG,IAAAA,GAHG;AAIHC,IAAAA,GAJG;AAKHC,IAAAA,KALG,CAKI;;AALJ,GAAP;AAOH;;AAED,MAAMS,KAAK,GAAG;AACVf,EAAAA;AADU,CAAd;AAIA,eAAee,KAAf","sourcesContent":["/*\n * @Descripttion: \n * @version: v1.0\n * @Author: aguan\n * @Date: 2021-11-08 17:09:50\n * @LastEditors: aguan\n * @LastEditTime: 2021-11-08 20:09:55\n */ \nimport { REACT_ELEMENT } from './contants'\nimport  { wrapToVdom } from './utils'\n/**\n * reactElement是jsx经过babel编译过后的一种正规的js写法（jsx是reactElement的语法糖）\n * \n * @category Function\n * @param {*} type 就是我们要渲染的元素类型，可以是一个元素Tag名称（小写字符串），也可以是一个组件的名称（大写的...组建）。\n * @param {object} config 就是我们在jsx中给元素/组建绑定的属性，这些属性会在config对象种以健值对的形式存在。\n * @param {...object} children 第3～n个参数 是元素/组件的内容/子元素，以children的形式存在。\n * @returns {object} 一个js对象树，他能完整的描述dom结构，称之为虚拟DOM\n * @example null\n */\nfunction createElement(type, config, children) {\n    let ref,key;\n    if (config) {\n        ref = config.ref; // 后面会说 是用来引用这个真实DOM元素的\n        key = config.key; // 后面会说 是用来进行DOM-diff优化的，用来唯一表示某个子元素的\n        delete config.ref;\n        delete config.key;\n    }\n    let props = { ...config }\n    if (arguments.length > 3) { // 如果参数的长度大于三，说明有多个儿子\n        props.children = Array.prototype.slice.call(arguments, 2).map(wrapToVdom)\n    } else if (arguments.length === 3) {\n        props.children = wrapToVdom(children); // 可以是字符串 数字 React元素\n    }\n    return { // 虚拟dom\n        $$typeof: REACT_ELEMENT, // 元素的类型\n        type,// dom标签的类型 h1 h2 span div\n        ref,\n        key,\n        props, // className style children\n    }\n}\n\nconst React = {\n    createElement \n}\n\nexport default React"]},"metadata":{},"sourceType":"module"}